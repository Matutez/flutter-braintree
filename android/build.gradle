group 'com.example.flutter_braintree'
version '1.0'

buildscript {
    ext.kotlin_version = '1.9.0' // Definimos la versión de Kotlin
    repositories {
        google()
        mavenCentral() // Usamos mavenCentral en lugar de jcenter
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.0' // Actualizamos el plugin de Gradle
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // Plugin de Kotlin
    }
}

allprojects {
    repositories {
        google()
        mavenCentral() // Eliminamos jcenter, ya que está obsoleto
        maven {
            url "https://cardinalcommerceprod.jfrog.io/artifactory/android"
            credentials {
                username 'braintree_team_sdk'
                password 'AKCp8jQcoDy2hxSWhDAUQKXLDPDx6NYRkqrgFLRc3qDrayg6rrCbJpsKKyMwaykVL8FWusJpp'
            }
        }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android' // Añadimos el plugin de Kotlin

android {
    compileSdkVersion 34 // Actualizamos el SDK de compilación a la última versión

    namespace "com.example.flutter_braintree" // Actualización de namespace

    defaultConfig {
        minSdkVersion 21
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11 // Actualizamos a Java 11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11' // Kotlin 1.9 es compatible con JVM 11
    }
}

dependencies {
    implementation 'com.braintreepayments.api:drop-in:6.13.0'
    implementation 'com.google.android.gms:play-services-wallet:21.0.0' // Actualizamos a la versión más reciente
    implementation 'androidx.appcompat:appcompat:1.6.1' // Actualizamos appcompat
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4' // Actualizamos constraintlayout

    components.all {
        allVariants {
            withDependencies { deps ->
                deps.each { dep ->
                    if (dep.group == 'net.minidev' && dep.name == 'json-smart') {
                        dep.version {
                            prefer "2.3"
                        }
                        dep.because "resolving dependencies issue"
                    }
                }
            }
        }
    }
}
